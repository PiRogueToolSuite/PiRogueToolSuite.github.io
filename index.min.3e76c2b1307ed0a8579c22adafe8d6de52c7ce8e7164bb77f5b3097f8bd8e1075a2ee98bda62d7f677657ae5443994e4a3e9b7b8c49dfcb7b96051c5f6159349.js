var suggestions=document.getElementById('suggestions'),search=document.getElementById('search');search!==null&&document.addEventListener('keydown',inputFocus);function inputFocus(a){a.ctrlKey&&a.key==='/'&&(a.preventDefault(),search.focus()),a.key==='Escape'&&(search.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(c){const d=suggestions.classList.contains('d-none');if(d)return;const a=[...suggestions.querySelectorAll('a')];if(a.length===0)return;const b=a.indexOf(document.activeElement);if(c.key==="ArrowUp"){c.preventDefault();const d=b>0?b-1:0;a[d].focus()}else if(c.key==="ArrowDown"){c.preventDefault();const d=b+1<a.length?b+1:b;a[d].focus()}}(function(){var a=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:'id',store:["href","title","description"],index:["title","description","content"]}});a.add({id:0,href:"/docs/pirogue/overview/",title:"Overview",description:"What a PiRogue is # The PiRogue is an open hardware device based on a Raspberry Pi operating as a network router (like any ISP router) analyzing network traffic in real time.\nIt can operate in different modes:\n  an on-the-field mode\n for emergency response (active spying, device tampering, \u0026hellip;) useful for responders in repressive environment conduct forensics analysis and network detection using a pre-installed set of tools    an expert mode for technical people to:",content:"  What a PiRogue is # The PiRogue is an open hardware device based on a Raspberry Pi operating as a network router (like any ISP router) analyzing network traffic in real time.\nIt can operate in different modes:\n  an on-the-field mode\n for emergency response (active spying, device tampering, \u0026hellip;) useful for responders in repressive environment conduct forensics analysis and network detection using a pre-installed set of tools    an expert mode for technical people to:\n determine the list of collected data assess regulatory compliance conduct penetration testing analyze malware\u0026rsquo;s behavior ensure reproducible analysis generate comprehensive reports    "}).add({id:1,href:"/docs/pirogue/build-a-pirogue/",title:"Build a PiRogue",description:"The hardware you need # In addition to a computer and an Internet connection, you will need, at least, a Raspberry Pi (+ its power supply), a SD-card and an ethernet cable.\nPick a Raspberry Pi # First, you need a Raspberry Pi. We support the following versions of Raspberry Pi:\n Raspberry Pi 3 Model B Raspberry Pi 3 Model B+ Raspberry Pi 4 Model B - 1GB Raspberry Pi 4 Model B - 2GB Raspberry Pi 4 Model B - 4GB Raspberry Pi 4 Model B - 8GB  Important note: Suricata is disabled on devices having less then 1.",content:"The hardware you need # In addition to a computer and an Internet connection, you will need, at least, a Raspberry Pi (+ its power supply), a SD-card and an ethernet cable.\nPick a Raspberry Pi # First, you need a Raspberry Pi. We support the following versions of Raspberry Pi:\n Raspberry Pi 3 Model B Raspberry Pi 3 Model B+ Raspberry Pi 4 Model B - 1GB Raspberry Pi 4 Model B - 2GB Raspberry Pi 4 Model B - 4GB Raspberry Pi 4 Model B - 8GB  Important note: Suricata is disabled on devices having less then 1.5GB of RAM.\n👉  Be sure to have an appropriate power supply for your PiRogue. If you don\u0026rsquo;t know what to choose, pick the official USB-C Raspberry Pi power supply.  If you want to buy a Raspberry Pi, visit the rpilocator website to check for availability.\nPick a micro SD-card # Second, you need a SD-card to run your PiRogue. The SD-card has to be large enough to store the operating system and all the data generated by the PiRogue itself. By default, it stores 5 days of network traffic history.\nYou may choose:\n a 32GB micro SD-card for regular use a 64GB micro SD-card if you plan doing long runs, analyzing the traffic of multiple devices simultaneously  Pick an ethernet cable # In order to connect the PiRogue to the Internet, you should have an ethernet cable connecting your PiRogue to your network. A simple cat. 5 ethernet cable will do the job.\nOptional stuff # Depending on your needs, you would want to add a hat to your PiRogue and protect everything with a case.\nBuild the PiRogue hat →\nBuild the PiRogue case →\n👉  If you don\u0026rsquo;t feel comfortable with building the case or the hat, feel free to buy one by reaching out to us.  Install PiRogue OS # Get PiRogue OS # PiRogue OS is periodically released. The OS is pre-configured so you just need to flash it on a micro SD-card. The image (the binary file to be flashed on the SD-card) is compressed. The file you have to download on your computer has a name following this schema PiRogue-OS-\u0026lt;year\u0026gt;-\u0026lt;month\u0026gt;-\u0026lt;day\u0026gt;.img.xz.\nDownload the latest version of PiRogue OS →\nSet up your SD card # Advanced Linux users can use a combination of xz and dd commands to flash their SD-card.\nWe recommend to download Balena Etcher and install it on your computer. Run Balena Etcher as administrator and follow the steps illustrated by the screenshots below.\nDownload Balena Etcher →\n           \nOnce the flashing is complete, eject the SD-card from your computer.\nSet up the PiRogue # If you have the hat for your PiRogue, it is the good time for you to plug it in and put everything into the case. Insert your freshly flashed micro SD-card into the PiRogue, plug the ethernet cable to the PiRogue. Remember, this cable connects your PiRogue directly (or through network switch) to your ISP router.\n👉  To operate properly, your PiRogue needs to have Internet access.  If you plan to use the PiRogue in a production environment (office, lab), we suggest you follow the securing your Raspberry Pi guide.\nFirst boot # First, check that the SD card is correctly inserted into the appropriate slot of your PiRogue and the ethernet cable is properly connected. Then, plug the power supply. Wait few minutes before trying to access your PiRogue.\nNow, connect to your PiRogue using SSH.\nssh pi@pirogue.local Type raspberry which is the default password and press Entrer.\nOnce connected, you have to finalize the installation of your PiRogue by running the following commands:\nsudo apt update sudo apt install pirogue-base -y sudo apt dist-upgrade -y sudo reboot During the installation, when prompted, you will have to answer:\n No to save iptables rules for IP v4 No to save iptables rules for IP v6 Yes to allow non-root users to capture network traffic    Fire it up! # After few minutes, we will be able to connect a wi-fi device and use the PiRogue\u0026rsquo;s dashboard.\nFirst, connect a wi-fi device such as your smartphone to the PiRogue\u0026rsquo;s wi-fi network PiRogue1 (default password: superlongkey). Next, open the PiRogue\u0026rsquo;s dashboard by going at http://\u0026lt;PiRogue IP address\u0026gt;:3000 with your Web browser or directly with this link:\nLearn how to operate your PiRogue →\nIt will take around 4 minutes before network flows start appearing in the dashboard. At the first start of your PiRogue the dashboard will look empty or broken. Don\u0026rsquo;t worry, connect a device to the PiRogue\u0026rsquo;s WiFi network, wait 5 minutes and refresh the dashboard by pressing F5 key on your keyboard.\nOpen your dashboard →\n⚠️  The first time your PiRogue starts, some services would fail to start. See how to check if your PiRogue is running properly.  Connect to your PiRogue with SSH →\nGet the default configuration →\n"}).add({id:2,href:"/docs/pirogue/build-a-pirogue-hat/",title:"Build a PiRogue hat",description:"The current PiRogue case version is v1.0_beta.\nGet the KiCad project and manufacturing files on GitHub →\n👉  Precision regarding some parts:\n the 2x20 header has to be in the tall version, you can buy one from Adafruit use a SPI 240x240 IPS screen like this one use CR1220 battery    Overview #",content:"The current PiRogue case version is v1.0_beta.\nGet the KiCad project and manufacturing files on GitHub →\n👉  Precision regarding some parts:\n the 2x20 header has to be in the tall version, you can buy one from Adafruit use a SPI 240x240 IPS screen like this one use CR1220 battery    Overview #      \n"}).add({id:3,href:"/docs/pirogue/build-a-pirogue-case/",title:"Build a PiRogue case",description:"The current PiRogue case version is v1.0_beta.\nGet the manufacturing files on GitHub →\n3D print a PiRogue case # To 3D print your PiRogue case, you will need:\n either the 4 separate STL files or the one containing the 4 part ready the slice a 3D printer PLA or PETG  Recommended printing parameters #  layer height: 0.2 mm infill: 20% no support material: PETG  The entire printing lasts around 3 hours for a complete case.",content:"The current PiRogue case version is v1.0_beta.\nGet the manufacturing files on GitHub →\n3D print a PiRogue case # To 3D print your PiRogue case, you will need:\n either the 4 separate STL files or the one containing the 4 part ready the slice a 3D printer PLA or PETG  Recommended printing parameters #  layer height: 0.2 mm infill: 20% no support material: PETG  The entire printing lasts around 3 hours for a complete case.\nAssemble the PiRogue case # To assemble your PiRogue case, you will need:\n the PiRogue case parts obviously 1 x M2.5 allen key 12 x M2.5 12mm hex socket bolts - see an example on McMaster 4 x M2.5 25mm female threaded hex standoffs - see an example on McMaster 4 x M2.5 hex nuts - see an example on McMaster  4 M2.5 12mm bolts and 4 M2.5 nuts are used to secure the fan in place. The 4 standoffs are placed between the Raspberry Pi and the hat.\n  "}).add({id:4,href:"/docs/pirogue/configure-a-pirogue/",title:"Configure a PiRogue",description:"⚠️  This documentation requires either\n the package pirogue-base version 1.0.2 or more recent being installed the package pirogue-base-pc version 1.0.0 or more recent being installed  Not sure? Upgrade your PiRogue.\n  How the PiRogue configuration works # PiRogue features come in Debian packages, each package manages some system configuration files:\n the package pirogue-ap creates the wi-fi access point, it manages:  /etc/hostapd/hostapd.conf /etc/dnsmasq.conf /etc/dhcpcd.conf /etc/iptables/rules.v4 /etc/iptables/rules.",content:"⚠️  This documentation requires either\n the package pirogue-base version 1.0.2 or more recent being installed the package pirogue-base-pc version 1.0.0 or more recent being installed  Not sure? Upgrade your PiRogue.\n  How the PiRogue configuration works # PiRogue features come in Debian packages, each package manages some system configuration files:\n the package pirogue-ap creates the wi-fi access point, it manages:  /etc/hostapd/hostapd.conf /etc/dnsmasq.conf /etc/dhcpcd.conf /etc/iptables/rules.v4 /etc/iptables/rules.v6   the package pirogue-dashboard creates the dashboard, it manages:  /etc/grafana/grafana.ini /etc/grafana/provisioning/datasources/datasources.yml /etc/grafana/provisioning/dashboards/grafana_dashboards.yml /var/lib/grafana/dashboards/pirogue-dashboard.json /var/lib/grafana/dashboards/pirogue-flow-details-dashboard.json   the package pirogue-eve-collector retrieve alarms from Suricata, it manages:  /etc/suricata/suricata.yaml    ⚠️  Any changes made manually in these files are overridden when these packages are installed and upgraded.  To ease the configuration of your PiRogue, we provide a tool pirogue-ctl which allows you to manage your configuration, create configuration backups, etc.\npirogue-ctl will generate new configuration files for the different services running on your PiRogue and ensure that your configuration is not modified when you upgrade your PiRogue.\nTo install it, run the following command, it will tell you if the package is already installed:\nsudo apt update sudo apt install pirogue-cli Once installed you can run:\nsudo pirogue-ctl config show If you have never applied any valid configuration, the command should display  \nCreate or modify my own PiRogue configuration # Once you have installed the pirogue-cli package and run sudo pirogue-ctl config show at least once, you can start reconfiguring your PiRogue. To do so, you first have to edit the appropriate configuration file:\nsudo nano /var/lib/pirogue/config/pirogue.env it will open a text editor (nano) showing your own configuration file. In this file you can safely change the following options:\n WIFI_NETWORK_NAME the name of the wi-fi network managed by your PiRogue, by default PiRogue1 WIFI_NETWORK_KEY the passphrase required to connect to the wi-fi network, by default superlongkey. WIFI_COUNTRY_CODE indicates the country (ISO/IEC 3166-1 format) in which your PiRogue is operating, by default FR DASHBOARD_PASSWORD the password asked when you log in the PiRogue\u0026rsquo;s dashboard, by default PiRogue  ⚠️  Do not use \u0026quot;, # or any emoji.  Example, we change the name of the wi-fi network for PiRogue11, our configuration file looks like:\nWIFI_NETWORK_NAME=PiRogue11 WIFI_NETWORK_KEY=superlongkey WIFI_COUNTRY_CODE=FR WLAN_IFACE=wlan0 ETH_IFACE=eth0 DASHBOARD_PASSWORD=PiRogue Press ctrl+x on your keyboard to exit nano, press y to save your modifications, press n otherwise.\nApply my configuration # Once you have edited the PiRogues\u0026rsquo;s configuration file, run the following command to apply this new configuration:\nsudo pirogue-ctl config apply press y to apply your configuration, n otherwise.\n  Now your configuration has been succesfuly applied. You can see it by running sudo pirogue-ctl config show.\nBy default, your configuration and all the different configuration files modified by pirogue-ctl have been backed-up.\nAt any time you can restore a previous configuration by running the command:\nsudo pirogue-ctl config restore   Check if everything runs properly # To check how healthy your PiRogue is, run\npirogue-ctl status   If you see everything in a mix of purple and green, congrats!\n"}).add({id:5,href:"/docs/pirogue/upgrade-a-pirogue/",title:"Upgrade a PiRogue",description:"All PiRogue features are bundled in Debian packages. So, by upgrading Debian (which is the only supported operating system) you are also upgrading your PiRogue.\nTo upgrade both the OS and the PiRogue features, run the following two commands:\nsudo apt update sudo apt dist-upgrade This operation could take some time and would require a reboot to make your PiRogue operates properly.\nHow often should I upgrade my PiRogue # We advice you to upgrade your PiRogue weekly.",content:"All PiRogue features are bundled in Debian packages. So, by upgrading Debian (which is the only supported operating system) you are also upgrading your PiRogue.\nTo upgrade both the OS and the PiRogue features, run the following two commands:\nsudo apt update sudo apt dist-upgrade This operation could take some time and would require a reboot to make your PiRogue operates properly.\nHow often should I upgrade my PiRogue # We advice you to upgrade your PiRogue weekly.\n⚠️ Note regarding heavily customized PiRogue # Some users would want to customize their PiRogue by playing with the different configuration files of the system. If so, be sure to backup your changes BEFORE upgrading your PiRogue. The upgrade will override your customization.\nThe following configuration files are managed by the PiRogue packages:\n /etc/hostapd/hostapd.conf /etc/dnsmasq.conf /etc/dhcpcd.conf /etc/iptables/rules.v4 /etc/iptables/rules.v6 /etc/suricata/suricata.yaml /etc/grafana/grafana.ini /etc/grafana/provisioning/datasources/datasources.yml /etc/grafana/provisioning/dashboards/grafana_dashboards.yml /var/lib/grafana/dashboards/pirogue-dashboard.json /var/lib/grafana/dashboards/pirogue-flow-details-dashboard.json  "}).add({id:6,href:"/docs/prologue/introduction/",title:"Introduction",description:"Get started # The PiRogue Tool Suite is made of two sub-systems:\n the PiRogue: hardware device for network traffic monitoring and interception the Tool Suite: a set of tool for network traffic analysis to install on your server  👉  The PiRogue can be used without the Tool Suite.   Help # Get help on PiRogue Tool Suite. Get help on Discord →",content:"Get started # The PiRogue Tool Suite is made of two sub-systems:\n the PiRogue: hardware device for network traffic monitoring and interception the Tool Suite: a set of tool for network traffic analysis to install on your server  👉  The PiRogue can be used without the Tool Suite.   Help # Get help on PiRogue Tool Suite. Get help on Discord →\n"}).add({id:7,href:"/docs/prologue/quick-start/",title:"Quick Start",description:"The PiRogue # The PiRogue is a device meant to intercept network traffic and conduct on-the-field device forensic.\nBuild your PiRogue →\nYou can buy a PiRogue from us by reaching out to us.\nThe Tool Suite # In development",content:"The PiRogue # The PiRogue is a device meant to intercept network traffic and conduct on-the-field device forensic.\nBuild your PiRogue →\nYou can buy a PiRogue from us by reaching out to us.\nThe Tool Suite # In development\n"}).add({id:8,href:"/docs/pirogue/operate-a-pirogue/",title:"Operate a PiRogue",description:"Find your PiRogue on the network # Once your PiRogue is running, it will be accessible to you from the network. There are 2 ways to get the IP address of your PiRogue.\nThe first way is by looking at the screen of the PiRogue Hat.\n  The second way is to use the ping command. To do so, on your computer connected to the same network as your PiRogue, run the following command:",content:"Find your PiRogue on the network # Once your PiRogue is running, it will be accessible to you from the network. There are 2 ways to get the IP address of your PiRogue.\nThe first way is by looking at the screen of the PiRogue Hat.\n  The second way is to use the ping command. To do so, on your computer connected to the same network as your PiRogue, run the following command:\nping -c1 pirogue.local Example of output, in this example, the IP address of the PiRogue is 192.168.0.16:\nPING pirogue.local (192.168.0.16) 56(84) bytes of data. 64 bytes from pirogue.home (192.168.0.16): icmp_seq=1 ttl=64 time=0.319 ms --- pirogue.local ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 0.319/0.319/0.319/0.000 ms Continuous network traffic analysis # The PiRogue is designed to continuously analyze the network traffic of any device connected to its Wi-Fi network. This means that it is constantly monitoring and inspecting the data packets that are being transmitted and received by these devices. The purpose of this analysis is to identify any suspicious or malicious activity that may be taking place on the network.\nTwo-pronged approach to network traffic analysis # The PiRogue employs two primary methods for analyzing network traffic: Deep Packet Inspection (DPI) and Suricata rule-based detection.\nDeep Packet Inspection (DPI) # DPI is a technique that allows the PiRogue to examine the contents of data packets in detail. This includes information such as the source and destination IP addresses, the ports being used, the type of data being transmitted, and even the identification of the application involved. By analyzing this information, we can identify patterns and anomalies that may indicate malicious activity.\nSuricata rule-based detection # Suricata is an open-source intrusion detection system (IDS) that uses a set of rules to identify known threats. These rules are constantly being updated to keep up with the latest threats. The PiRogue comes pre-configured with rules from ProofPoint Emerging Threat Open and Echap, two reputable sources of threat intelligence.\nVisualizing analysis results in the dashboard # The results of the PiRogue\u0026rsquo;s automatic analysis can be visualized in the dashboard. This dashboard provides a graphical overview of the network traffic that has been analyzed, as well as any threats that have been detected. The dashboard also allows users to drill down into the details of specific network flows to learn more about them.\nThe dashboard # By default, your PiRogue exposes a Grafana dashboard showing in realtime the ongoing network connections, security alerts and few other information. Checkout the cheatsheet to get default user and password of the dashboard.\nOpen your dashboard →\nDepending on your network configuration, this link above may not work. If so, check how to get the IP address of your PiRogue in the previous section.\nThe default dashboard is composed of different panels, we will go through the main ones.\n⚠️  The PiRogue keeps 5 days of history, data older than 5 days is automatically deleted.  General statistics #   This panel displays various information:\n the number of different devices that have been connected to the PiRogue\u0026rsquo;s Wi-Fi network during the selected period of time the number of security alerts that have occurred during the selected period of time the amount of network traffic exchanged between connected devices and the Internet during the selected period of time the number of network flows that have occurred during the selected period of time the number of different domains that have been contacted during the selected period of time  World map #   This panel displays the location of the different servers the connected devices have been communicating with during the selected period of time.\nList of flows #   This panel displays the different network flows that have occurred during the selected period of time:\n the time at which the flow as started the category of traffic that has been identified by NFStream the type of application that has generating this flow the domain name of the contacted server the IP address of the source of the flow the IP address of the destination of the flow the country where the remote server is located at the amount of network traffic associated to this flow  List of security alerts #   This panel displays the different security alerts generated by Suricata that have occurred during the selected period of time:\n the time of the alert. If you click on it, you will get the details of the selected alert) the severity of the alert the type of threat associated to the alert the name of the rule corresponding to the alert the IP address of the source of the flow associated to the alert the IP address of the destination of the flow associated to the alert  "}).add({id:9,href:"/docs/pirogue/cheatsheet/",title:"Cheatsheet",description:"Default configuration #    Name Value Example of usage     SSH port 22 ssh -p22 pi@\u0026lt;PiRogue IP address\u0026gt;   SSH user pi    SSH password raspberry    Dashboard port 3000 http://\u0026lt;PiRogue IP address\u0026gt;:3000   Dashboard user admin    Dashboard password PiRogue    Wi-Fi SSID PiRogue1    Wi-Fi password superlongkey    Chronograph port 8888 http://\u0026lt;PiRogue IP address\u0026gt;:8888    To see your configuration, run",content:"Default configuration #    Name Value Example of usage     SSH port 22 ssh -p22 pi@\u0026lt;PiRogue IP address\u0026gt;   SSH user pi    SSH password raspberry    Dashboard port 3000 http://\u0026lt;PiRogue IP address\u0026gt;:3000   Dashboard user admin    Dashboard password PiRogue    Wi-Fi SSID PiRogue1    Wi-Fi password superlongkey    Chronograph port 8888 http://\u0026lt;PiRogue IP address\u0026gt;:8888    To see your configuration, run\nsudo pirogue-ctl config show Important files #    Name Location     SSH configuration /etc/ssh/sshd_config   PiRogue configuration /var/lib/pirogue/config/pirogue.env   Suricata rules /var/lib/suricata/rules/suricata.rules   PiRogue screen /etc/pirogue/pirogue_infos_screen.py    "}).add({id:10,href:"/docs/pirogue/useful-commands/",title:"Useful commands",description:"Find the IP address of your PiRogue # On your computer connected to the same network as your PiRogue, run the following command:\nping -c1 pirogue.local Example of output, in this example, the IP address of the PiRogue is 192.168.0.16:\nPING pirogue.local (192.168.0.16) 56(84) bytes of data. 64 bytes from pirogue.home (192.168.0.16): icmp_seq=1 ttl=64 time=0.319 ms --- pirogue.local ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 0.",content:"Find the IP address of your PiRogue # On your computer connected to the same network as your PiRogue, run the following command:\nping -c1 pirogue.local Example of output, in this example, the IP address of the PiRogue is 192.168.0.16:\nPING pirogue.local (192.168.0.16) 56(84) bytes of data. 64 bytes from pirogue.home (192.168.0.16): icmp_seq=1 ttl=64 time=0.319 ms --- pirogue.local ping statistics --- 1 packets transmitted, 1 received, 0% packet loss, time 0ms rtt min/avg/max/mdev = 0.319/0.319/0.319/0.000 ms Connect to your PiRogue with SSH # This section is largely inspired by the Raspberry Pi official documentation.\nYou can use SSH to connect to your PiRogue from a Linux desktop, another PiRogue, or from an Apple Mac without installing additional software.\nOpen a terminal window on your computer replacing \u0026lt;PiRogue IP address\u0026gt; with the IP address of the PiRogue you’re trying to connect to,\nssh -p22 pi@\u0026lt;PiRogue IP address\u0026gt; When the connection works you will see a security/authenticity warning. Type yes to continue. You will only see this warning the first time you connect.\n👉  If you receive a connection timed out error it is likely that you have entered the wrong IP address for the PiRogue.  Next you will be prompted for the password for the pi login: the default password on PiRogue OS is raspberry.\nFor security reasons it is highly recommended to change the default password on the PiRogue (also, you can not login through ssh if the password is blank). You should now be able to see the PiRogue prompt, which will be identical to the one found on the PiRogue itself.\nIf you have set up another user on the PiRogue, you can connect to it in the same way, replacing the username with your own, e.g. eben@192.168.1.5\npi@pirogue ~ $ You are now connected to the PiRogue remotely, and can execute commands.\nChange the password of user pi # On your PiRogue, run the following command and answer the different questions:\npasswd Change locale and/or timezone # On your PiRogue, run the following command:\nsudo raspi-config You should now see something like\n1 System Options Configure system settings 2 Display Options Configure display settings 3 Interface Options Configure connections to peripherals 4 Performance Options Configure performance settings 5 Localisation Options Configure language and regional settings 6 Advanced Options Configure advanced settings 8 Update Update this tool to the latest version 9 About raspi-config Information about this configuration tool Use the arrows of your keyboard to navigate through the different options and menus. Select 5 Localisation options by hitting the down arrow of your keyboard. Press Enter to enter the menu. You should now see the following options\nL1 Locale Configure language and regional settings L2 Timezone Configure time zone L3 Keyboard Set keyboard layout to match your keyboard L4 WLAN Country Set legal wireless channels for your country Then select either L1 or L2 depending on what you want to change. Press Enter to enter the menu and follow the instructions.\nRestart PiRogue services # On your PiRogue, run the following command:\nsudo systemctl restart pirogue* Restart your PiRogue # On your PiRogue, run the following command:\nsudo reboot Shutdown your PiRogue # On your PiRogue, run the following command:\nsudo halt "}).add({id:11,href:"/docs/pirogue/pre-installed-tools/",title:"Pre-installed tools",description:"Your PiRogue comes with a set a pre-installed and pre-configured tools covering different purposes.\nNetwork traffic capture #  tcpdump to capture network traffic into PCAP files - documentation mitm-proxy to intercept and capture HTTPS traffic - documentation  Network traffic analysis #  suricata to detect malicious traffic based on rules - documentation nfstream to inspect traffic and determine the application involved in each flow - documentation  Device analysis \u0026amp; forensic #  adb to interact with Android devices - documentation libimobiledevice to interact with iOS devices - documentation mvt to conduct device forensic analysis - documentation frida to instrument programs running on a device - documentation  Data visualization #  influxdb to store data generated by nfstream and suricata - documentation chronograph to search and export data stored in influxdb - documentation grafana to display data on dashboards - documentation  Utilities #  vim to edit files - documentation git to version files - documentation jq to manipulate JSON files - documentation gnupg2 to sign, encrypt and verify files - documentation python3 to write and execute Python programs - documentation  ",content:"Your PiRogue comes with a set a pre-installed and pre-configured tools covering different purposes.\nNetwork traffic capture #  tcpdump to capture network traffic into PCAP files - documentation mitm-proxy to intercept and capture HTTPS traffic - documentation  Network traffic analysis #  suricata to detect malicious traffic based on rules - documentation nfstream to inspect traffic and determine the application involved in each flow - documentation  Device analysis \u0026amp; forensic #  adb to interact with Android devices - documentation libimobiledevice to interact with iOS devices - documentation mvt to conduct device forensic analysis - documentation frida to instrument programs running on a device - documentation  Data visualization #  influxdb to store data generated by nfstream and suricata - documentation chronograph to search and export data stored in influxdb - documentation grafana to display data on dashboards - documentation  Utilities #  vim to edit files - documentation git to version files - documentation jq to manipulate JSON files - documentation gnupg2 to sign, encrypt and verify files - documentation python3 to write and execute Python programs - documentation  "}).add({id:12,href:"/docs/recipes/pirogue-without-ethernet-connection/",title:"PiRogue without ethernet connection",description:"This is the translation in English of a tutorial originally written by Thomas Fourmeux, a French librarian. Follow him on Twitter!\nContext # This tutorial is for using the PiRogue in a situation where you don\u0026rsquo;t have a wired connection to the Internet (such as in a car). Thanks to a travel router, you will be able to share (via USB) your smartphone\u0026rsquo;s LTE/4G connection with the PiRogue.\nRequirements # In this situation, you need the following hardware:",content:"This is the translation in English of a tutorial originally written by Thomas Fourmeux, a French librarian. Follow him on Twitter!\nContext # This tutorial is for using the PiRogue in a situation where you don\u0026rsquo;t have a wired connection to the Internet (such as in a car). Thanks to a travel router, you will be able to share (via USB) your smartphone\u0026rsquo;s LTE/4G connection with the PiRogue.\nRequirements # In this situation, you need the following hardware:\n a PiRogue (obviously) a smartphone with a LTE/4G connection to the Internet a travel router GL-AR750 available on Amazon a laptop  Setup # Follow these steps to connect all the pieces together:\n connect your PiRogue to your travel router with an ethernet cable power on both the travel router and the PiRogue connect your smartphone (the one sharing its Internet connection) with a USB cable to the travel router connect your laptop to the travel router\u0026rsquo;s Wi-Fi network named GL-AR750S-XXX, the password is goodlife (it is also written on the back of the travel router) on your laptop, open the travel router\u0026rsquo;s administration panel in a Web browser, it is usually accessible at http://192.168.8.1  👉  Note that you have to enable the USB tethering in the settings of your smartphone.  Configure the travel router # When you first connect, you must set the language and administrator password to secure access to the router.\n  In the Internet tab, enable connection sharing as follows: We can connect the router in LAN via a cable, use the router in repeater mode, connect a 4G dongle or in connection sharing mode with a smartphone. It is this last option that interests us. After connecting the smartphone via USB, the router interface detects the device in the Sharing section with the usb0 device and proposes to connect the two devices. We establish the connection by clicking on Connect.\n  Once the connection is established, the router shows the network configuration with its IP address, the netmask, the default gateway and the default DNS server.\n  Get the PiRogue\u0026rsquo;s IP address # To be able to connect to your PiRogue dashboard, you need its IP address. To find it, just go to the Clients tab of the router\u0026rsquo;s administration panel to list all the devices connected to it. The PiRogue is indicated in the column Wired device with the name raspberrypi.\n  Finally, the PiRogue network is operational. You can connect to the PiRogue\u0026rsquo;s dashboard as you usually do just by browsing its IP address on port 3000 in your Web browser. The IP address is listed on the Clients page of the router, it should look like 192.168.8.xxx\n"}).add({id:13,href:"/docs/recipes/device-forensic-with-mvt/",title:"Device forensic with MVT",description:"Disclaimer #  Mobile Verification Toolkit (MVT) is a tool to facilitate the consensual forensic analysis of Android and iOS devices, for the purpose of identifying traces of compromise.\n  MVT\u0026rsquo;s purpose is not to facilitate adversarial forensics of non-consenting individuals' devices. The use of MVT and derivative products to extract and/or analyse data originating from devices used by individuals not consenting to the procedure is explicitly prohibited in the license.",content:"Disclaimer #  Mobile Verification Toolkit (MVT) is a tool to facilitate the consensual forensic analysis of Android and iOS devices, for the purpose of identifying traces of compromise.\n  MVT\u0026rsquo;s purpose is not to facilitate adversarial forensics of non-consenting individuals' devices. The use of MVT and derivative products to extract and/or analyse data originating from devices used by individuals not consenting to the procedure is explicitly prohibited in the license.\n MVT a.k.a Mobile Verification Toolkit is developed and maintained by Amnesty International. This tool is pre-installed on your PiRogue but not maintained by the PTS team.\nOfficial documentation →\nPreliminaries # Before using MVT, be sure to pull the IOCs from Amnesty International\u0026rsquo;s git repository.\nTo do so, on your PiRogue, run the following command\nmvt-android download-iocs Forensic of an Android device # First of all, you have to connect the target device with USB to your PiRogue. On the device, you have to enable ADB in the Developer Settings. If the device is rooted, you should enable root for ADB only. On the Android device select Transfer files by taping on Android System - USB charging (in the list of notifications).\nNB: all the following commands have to be executed on your PiRogue.\nThen, run the following command:\nadb devices It should give an output similar to:\n* daemon not running; starting now at tcp:5037 * daemon started successfully List of devices attached 2[redacted]e device Before running MVT, you have to kill the ADB server\nadb kill-server Finally, launch MVT and follow its official documentation.\nBelow is an example of use of MVT.\nmvt-android check-adb -f -o mvt-demo It might produce an output similar to\n  Forensic of an iOS device # Prepare the iOS device to be analyzed # First of all, you have to connect the target device with USB to your PiRogue.\nNB: all the following commands have to be executed on your PiRogue.\nOnce connected, start the USB mixer by running the following command\nusbmuxd ⚠️  If usbmuxd is not found, install libimobiledevice. Run the following command\nsudo apt install libimobiledevice-utils\n  The iOS device may be asking you if you trust the connected computer, trust it. Then, check if your iOS device is correctly recognized by running\nideviceinfo The previous command would print various information regarding your device.\nBackup the iOS device # In order to get as many information as possible, you have to turn backup encryption on by running\nidevicebackup2 backup encryption on -i Then backup the iOS device by running\nidevicebackup2 backup --full backup/ Once done, you can unplug the iOS device. Run ls -l backup to get the name of the backup.\nAnalyze the backup # Run the following command to decrypt the backup\nmvt-ios decrypt-backup -p \u0026lt;backup password\u0026gt; -d decrypted backup/\u0026lt;backup name\u0026gt; For more details and options, check the MVT documentation regarding the backup password. If you have backed up this phone using iTunes, the backup password is the same as the one you provided in iTunes.\nNext, analyze the backup with mvt-ios\nmvt-ios check-backup -o checked decrypted Finally, check the the results listed in the checked folder\nls -l checked The folder checked contains several JSON files. Any IOC matches are stored in JSON files suffixed by _detected.\n"}).add({id:14,href:"/docs/recipes/add-your-own-suricata-rules-to-pirogue/",title:"Add your own suricata rules to PiRogue",description:"This is a friendly contribution written by evilcel3ri, security researcher also developer for Pithus.Follow him on Twitter!\nAdd your own suricata rules to PiRogue # You need:\n SSH access to your PiRogue Github knowledge Optional: if you want access to ET PRO you would need your Oink code  The easiest way to manage your Suricata rules is to have them on a Github repository or on a Web directory that can be checked out by suricata-update.",content:"This is a friendly contribution written by evilcel3ri, security researcher also developer for Pithus.Follow him on Twitter!\nAdd your own suricata rules to PiRogue # You need:\n SSH access to your PiRogue Github knowledge Optional: if you want access to ET PRO you would need your Oink code  The easiest way to manage your Suricata rules is to have them on a Github repository or on a Web directory that can be checked out by suricata-update. Manually adding rules directly to the PiRogue is not recommended as it might get overwritten by an update.\nWrite your rules according to Suricata\u0026rsquo;s documentation. Bare in mind, the rules you want to write are alert ones. Set them up on a Github repository (or a Web directory) that can be reached by your PiRogue.\nAfter being connected to your PiRogue.\nAdd your new source in this fashion:\nsudo suricata-update add-source YOUR_NAME URL_TO_THE_DOT_RULES Run\nsudo suricata-update update-sources and then\nsudo suricata-update and your rules must be updated 🙂\nExample with Abuse.ch SSL blocklist # If you want to add the Abuse.ch SSL blocklist, run the following commands:\nsudo suricata-update add-source SSLBL https://sslbl.abuse.ch/blacklist/sslblacklist.rules sudo suricata-update update-sources sudo suricata-update Add an already published rule set such as ET Pro # While connected to your PiRogue: Run\nsudo suricata-update enable-source et/pro insert your oink-code when prompted and finally run\nsudo suricata-update update-sources sudo suricata-update In both cases, the PiRogue will grab the new version of your rules on a daily basis.\n"}).add({id:15,href:"/docs/recipes/turn-a-regular-pc-into-a-pirogue/",title:"Turn a regular PC into a PiRogue",description:"This recipe is dedicated to intrepid users 😎\nRequirements # To follow this recipe we need:\n a PC with one Ethernet interface, one wireless interface and Debian 11 freshly installed the wireless interface has to support the AP mode (access-point mode) the PC is connected to our local network via its Ethernet adapter the PC has an Internet connection  ⚠️  Don\u0026rsquo;t install any desktop environment.  Prepare the system # We will do everything by command line so, we connect to our PC and run the following command to upgrade it:",content:"This recipe is dedicated to intrepid users 😎\nRequirements # To follow this recipe we need:\n a PC with one Ethernet interface, one wireless interface and Debian 11 freshly installed the wireless interface has to support the AP mode (access-point mode) the PC is connected to our local network via its Ethernet adapter the PC has an Internet connection  ⚠️  Don\u0026rsquo;t install any desktop environment.  Prepare the system # We will do everything by command line so, we connect to our PC and run the following command to upgrade it:\nsudo apt update sudo apt dist-upgrade Then install iw to check if the wireless interface supports the AP mode:\nsudo apt install iw run iw listand scroll through its output to check if the wireless interface supports the AP mode. If so, it should look like\n  Install the PiRogue packages # Next, we have to add the PTS PPA (repositoty containing all PiRogue packages) by running\nsudo curl -o /etc/apt/sources.list.d/pirogue.list https://pts-project.org/ppa/pirogue.list sudo curl -o /etc/apt/trusted.gpg.d/pirogue.asc https://pts-project.org/ppa/Key.gpg sudo apt update Finally install the PiRogue features:\nsudo apt install pirogue-base-pc Check if everything runs properly # To check how healthy our PiRogue is, run\npirogue-ctl status   If we see everything in a mix of purple and green, congrats! If not, join the Discord channel to get help.\n"}).add({id:16,href:"/docs/recipes/how-to-intercept-and-decrypt-tls-traffic/",title:"How to intercept and decrypt TLS traffic",description:"This recipe is dedicated to intrepid users 😎\nPiRogue comes with a pirogue-intercept-* helpers to help you intercept encrypted TLS traffic from applications, even in presence of TLS certificate pinning.\nThese helpers are meant to:\n capture the network traffic instrument a specific application or any launched application  Requirements # To follow this recipe, you need:\n an up-to-date PiRogue a rooted Android device  Procedure # First, SSH onto your PiRogue.",content:"This recipe is dedicated to intrepid users 😎\nPiRogue comes with a pirogue-intercept-* helpers to help you intercept encrypted TLS traffic from applications, even in presence of TLS certificate pinning.\nThese helpers are meant to:\n capture the network traffic instrument a specific application or any launched application  Requirements # To follow this recipe, you need:\n an up-to-date PiRogue a rooted Android device  Procedure # First, SSH onto your PiRogue. Attach your smartphone to the PiRogue through USB and make sure \u0026ldquo;USB debugging\u0026rdquo; is on and working.\nMake sure to enable ADB Transfer files by clicking on the Android System notification.\n Your browser does not support the video tag.   Then check if the PiRogue sees your device by running the command:\nadb devices You should see your device listed. If not, be sure to use the right USB cable for your device. If the issue remains, check that you have the rights to interact with USB devices. To do so, run the command groups to list the groups you belong to and check if the group plugdev is listed. If not, execute the following command sudo usermod -aG plugdev $LOGNAME and reboot.\nIdentify and install the application # Android applications are identified by their package name. As an example, the French weather forecast application is fr.meteo. You can get the package name either from Google Play URL or from any tool analyzing Android apps such as Pithus, Virus Total, etc. In our example, the Google Play URL looks like https://play.google.com/store/apps/details?id=fr.meteo, the package name of the application is specified after id=.\nOnce you have identified the application you want to analyze, you have to download and install it on your target device. If you need to download the application from Google Play, we recommend to use apkeep (not installed by default on PiRogue).\nFinally, to install the application, run the following command:\nadb install \u0026lt;APK file\u0026gt; If your application contains multiple APKs (like in XAPK), use the command adb install-multiple \u0026lt;list all apks\u0026gt;.\nDon\u0026rsquo;t launch the application.\nInstrument and intercept # Once the application to be analyzed is installed on your Android device, connect your device to the PiRogue Wi-Fi network and run the following command:\nsudo pirogue-intercept-gated -o \u0026lt;path to the output directory\u0026gt; Adapt the command according to your output directory of choice. Once started and showing Waiting for data, manually launch the application you want to analyze.\n  Now, interact with the application freely. When you are done interacting with the app, hit Ctrl+C on your keyboard to stop interception.\n⚠️  Make sure that the application you want to be analyzed is not running in background. You can, for example, force stop it in Settings \u0026gt; Apps, select the application and click on Stop.  Decrypt the traffic # If we run the previous command with sudo, we have to fix the permissions of generated files by running:\nchown -R pi:pi \u0026lt;path to the output directory\u0026gt; Then enter the output directory with:\ncd \u0026lt;path to the output directory\u0026gt;   Next, we generate a PCAPNG file containing both the TLS keys and the captured traffic:\neditcap --inject-secrets tls,sslkeylog.txt traffic.pcap decrypted.pcapng Next, we export the decrypted traffic in JSON:\ntshark -2 -T ek --enable-protocol communityid -Ndmn -r decrypted.pcapng \u0026gt; traffic.json   Finally, to view the decrypted traffic, run:\npirogue-view-tls -i traffic.json -t socket_trace.json   ⚠️  The display of the stack trace has been added to pirogue-cli in version 1.0.5. Be sure to upgrade your PiRogue.  If you face any issue, join the Discord channel to get help.\nGenerated files # The commands pirogue-intercept-single and pirogue-intercept-gated generate the following files:\n aes_info.json contains all AES and RSA encryption/decryption operation with both cleartext and cyphertext device.json contains various information about the device such as IMEI, Android version experiment.json contains timing information such as the start and end date of the experiment screen.mp4 contains the video recording of the device\u0026rsquo;s screen socket_trace.json contains the stack trace of all operations on sockets (open, close, read, write\u0026hellip;) sslkeylog.txt contains the TLS encryption keys in the NSS key log format traffic.pcap contains the entire network traffic captured during the experiment  NB: you can open the PCAP file with Wireshark and specify the key log file in Settings \u0026gt; Protocols \u0026gt; TLS. This way, Wireshark will automatically decrypt TLS traffic.\n"}).add({id:17,href:"/docs/recipes/export-pirogue-data/",title:"Export PiRogue data",description:"This is the translation in English from Spanish of a tutorial originally written by niculcha.\nWhat is PiRogue # For a few months we have been testing PiRogue to perform network traffic analysis mainly on cell phones, so PiRogue becomes a super complete tool that contains many applications that help us to perform network traffic analysis, this hardware and software helps us to perform monitoring on intervention and network traffic.",content:"This is the translation in English from Spanish of a tutorial originally written by niculcha.\nWhat is PiRogue # For a few months we have been testing PiRogue to perform network traffic analysis mainly on cell phones, so PiRogue becomes a super complete tool that contains many applications that help us to perform network traffic analysis, this hardware and software helps us to perform monitoring on intervention and network traffic.\nOne of the big challenges in forensic analysis is to know how to search the results, PiRogue deletes the data every 5 days for security reasons but to do a further analysis we need to extract the alerts and flows as a result of the analysis, to export the data we need to do the following steps.\nHow to export data # First, connect to your PiRogue with SSH:\nssh -p22 pi@\u0026lt;PiRogue IP address\u0026gt; Then, export alert data in a CSV file:\ninflux -database \u0026#39;suricata\u0026#39; -execute \u0026#39;SELECT * FROM \u0026#34;suricata\u0026#34;.\u0026#34;suricata_5d\u0026#34;.\u0026#34;alert\u0026#34;\u0026#39; -format \u0026#39;csv\u0026#39; alerts-`date +\u0026#34;%Y-%m- %d\u0026#34;`.csv Export flow data too:\ninflux -database \u0026#39;flows\u0026#39; -execute \u0026#39;SELECT * FROM \u0026#34;flows\u0026#34;.\u0026#34;flows_5d\u0026#34;.\u0026#34;flow\u0026#34;\u0026#39; -format \u0026#39;csv\u0026#39; flows-`date +\u0026#34;%Y-%m- %d\u0026#34;`.csv Finally, copy 2 generated CSV files from PiRogue to your computer using scp. On your computed, use the following command:\nscp pi@\u0026lt;iRogue IP address\u0026gt;:\u0026lt;path of the CSV file\u0026gt; . Once you have retrieved your CSV files, you can open them with Excel, LibreOffice or any other software supporting CVS format.\nGoing further # The queries listed above are pretty simple but you can adapt them to your specific need, check out the influxdb documentation.\nYou can refine your request by filtering the following fields of the flows database:\n time: timestamp in nanoseconds on first flow bidirectional packet application_category_name: nDPI detected application category name application_name: nDPI detected application name bidirectional_bytes: flow bidirectional bytes accumulator bidirectional_duration_ms: flow bidirectional duration in milliseconds city: city determined by geoip based on the remote IP address community_id: community ID community_id_b64: community ID encoded in base64 country: country name determined by geoip based on the remote IP address country_iso: country ISO code determined by geoip based on the remote IP address dst2src_bytes: flow destination to source bytes accumulator dst_ip: destination IP address string representation dst_mac: destination MAC address string representation dst_port: transport layer destination port latitude: latitude determined by geoip based on the remote IP address longitude: longitude determined by geoip based on the remote IP address requested_server_name: requested server name (SSL/TLS, DNS, HTTP) src2dst_bytes: flow source to destination bytes accumulator src_ip: source IP address string representation src_mac: source MAC address string representation src_port: transport layer source port  You can refine your request by filtering the following fields of the suricata database:\n time: timestamp in nanoseconds on detection alert_category: category of the triggered rule alert_severity: alert severity alert_signature: signature of the triggered rule alert_signature_id: unique identifier of the triggered rule app_proto: network protocol (dns, http\u0026hellip;) community_id: community ID community_id_b64: community ID encoded in base64 dest_ip: destination IP address string representation dest_port: transport layer destination port in_iface: network interface name proto: transport protocol (UDP, TCP) src_ip: source IP address string representation src_port: transport layer source port  "}).add({id:18,href:"/docs/recipes/",title:"Recipes",description:"Recipes",content:""}).add({id:19,href:"/docs/pirogue/",title:"The PiRogue",description:"The PiRogue",content:""}).add({id:20,href:"/docs/prologue/",title:"Prologue",description:"Prologue",content:""}).add({id:21,href:"/docs/",title:"Documentation",description:"Documentation",content:""}),search.addEventListener('input',b,!0);function b(){var b,e;const d=5;b=this.value,e=a.search(b,{limit:d,enrich:!0});const c=new Map;for(const a of e.flatMap(a=>a.result)){if(c.has(a.doc.href))continue;c.set(a.doc.href,a.doc)}if(suggestions.innerHTML="",suggestions.classList.remove('d-none'),c.size===0&&b){const a=document.createElement('div');a.innerHTML=`No results for "<strong>${b}</strong>"`,a.classList.add("suggestion__no-results"),suggestions.appendChild(a);return}for(const[h,g]of c){const b=document.createElement('div');suggestions.appendChild(b);const a=document.createElement('a');a.href=h,b.appendChild(a);const e=document.createElement('span');e.textContent=g.title,e.classList.add("suggestion__title"),a.appendChild(e);const f=document.createElement('span');if(f.textContent=g.description,f.classList.add("suggestion__description"),a.appendChild(f),suggestions.appendChild(b),suggestions.childElementCount==d)break}}})()